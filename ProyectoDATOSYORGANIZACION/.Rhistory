library(dplyr)
pop50.mex <-  DataDB %>% filter(CountryCode == "MEX" ,  Population > 50000)   # Ciudades del país de México con más de 50,000 habitantes
head(pop50.mex)
unique(DataDB$CountryCode)   # Países que contiene la BDD
dbDisconnect(MyDataBase)
library(dbplyr)
library(pool)
install.packages("pool")
library(dbplyr)
# install.packages("pool")
install.packages("dbplyr")
library(dbplyr)
library(pool)
library(pool)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(my_db)
my_db %>% tbl("Country") %>% head(5) # library(dplyr)
my_db %>% tbl("CountryLanguage") %>% head(5)
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch(rs)
unique(DataDB$CountryCode)   # Países que contiene la BDD
dbDisconnect(MyDataBase)
dbDisconnect(MyDataBase)
dbDisconnect(MyDataBase)
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(conn)
install.packages("rjson")   #Siempre usar comillas en el nombre del paquete
library(rjson)            # Quitar comillas del nombre
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
class(JsonData)                     # Vemos que tipo de objeto es JsonData
str(JsonData)                       # Vemos la naturaleza de sus variables
sqrt(JsonData$Mobile)
# install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
summary(xmlfile)
head(xmlfile)
#Extraer los valores xml
topxml <- xmlSApply(xmlfile, function(x) xmlSApply(x, xmlValue))
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
str(xml_df) # Observar la naturaleza de las variables del DF
xml_df$PRICE <- as.numeric(xml_df$PRICE)
xml_df$YEAR <- as.numeric(xml_df$YEAR)
mean(xml_df$PRICE)
mean(xml_df$YEAR)
data_df <- xmlToDataFrame(link)
head(data_df)
# install.packages("rvest")
library(rvest)
install.packages("rvest")
data_df <- xmlToDataFrame(link)
head(data_df)
data_df <- xmlToDataFrame(link)
head(data_df)
# install.packages("rvest")
library(rvest)
# install.packages("rvest")
library(rvest)
theurl <- "https://solarviews.com/span/data2.htm"
file <- read_html(theurl)    # Leemos el html
file
class(file)
tables <- html_nodes(file, "table")
tables
table1 <- html_table(tables[4], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
str(table)  # Vemos la naturaleza de las variables
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
str(table)  # Vemos la naturaleza de las variables
table$Albedo <- as.numeric(table$Albedo)
str(table)  # Vemos la naturaleza de las variables
table$Albedo <- as.numeric(table$Albedo)
str(table)
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file <- read_html(theurl)    # Leemos el html
class(file)
tables <- html_nodes(file, "table")
tables
table1 <- html_table(tables[1], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
# y convertimos la lista en un data frame para su manipulaciÃ³n con R
table
table$Sueldo <- as.numeric(table$Sueldo)
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN$", "", table$Sueldo)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table$Sueldo)
table
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file <- read_html(theurl)    # Leemos el html
class(file)
tables <- html_nodes(file, "table")
tables
table1 <- html_table(tables[1], fill = TRUE)
# y convertimos la lista en un data frame para su manipulaciÃ³n con R
table
# y convertimos la lista en un data frame para su manipulaciÃ³n con R
table
table1 <- html_table(tables[1], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
# y convertimos la lista en un data frame para su manipulaciÃ³n con R
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("$", "", table$Sueldo)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("$", "", table$Sueldo)
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table$Sueldo)
table
gsub("$", "", table$Sueldo)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table$Sueldo)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table$Sueldo)
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
table<-gsub("MXN", "", table$Sueldo)
table
table<-gsub("/mes", "", table$Sueldo)
table<-gsub("mes", "", table$Sueldo)
table
gsub("mes", "", table)
table1 <- html_table(tables[1], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
# y convertimos la lista en un data frame para su manipulaciÃ³n con R
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table$Sueldo)
gsub("mes", "", table$Sueldo)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table$Sueldo)
gsub("mes", "", table$Sueldo)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
gsub("MXN", "", table)
gsub("mes", "", table)
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
suel<-gsub("MXN", "", table$Sueldo)
suel<-gsub("mes", "", suel)
suel
suel<-gsub("$","",suel)
suel
suel<-gsub("$","",suel)
suel
suel<-gsub("/$/","",suel)
suel
suel<-gsub("\$","",suel)
suel
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
suel<-gsub("[^[:alnum:][:blank:]?]", "", suel)
suel
table1 <- html_table(tables[1], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
# y convertimos la lista en un data frame para su manipulaciÃ³n con R
table
# Por Ãºltimo realizamos una conversiÃ³n de una columna tipo chr a num, se pueden
# hacer las conversiones que se requieran
suel<-gsub("[^[:alnum:][:blank:]?]", "", table$Sueldo)
suel
suel<-gsub("mes", "", suel)
suel
suel<-gsub("MXN","",suel)
suel
table$Sueldo<-suel
table
table$Sueldo <- as.numeric(table$Sueldo)
str(table)
table
str(table)
which.max(table$Sueldo)
table[which.max(table$Sueldo)]
table[which.max(table$Sueldo)[1]]
table[ mxsuel<-which.max(table$Sueldo) ]
mxsuel<-which.max(table$Sueldo)
table[mxsuel]
mxsuel
table[mxsuel[1]]
table[,mxsuel[1]]
table[mxsuel[1],]
mins<-which.min(table$Sueldo)
tabale[mins[1],]
table[mins[1],]
datos <- mutate(datos, as.numeric())
as.numeric(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
setwd("BEDU/DataScience/Postworks/Poswork 1/BEDU/Proyecto/")
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
as.numeric(datos)
str(datos)
class(datos)
length(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
length(datos)
datos[1,]
datos[0,]
length(datos)
#datos[0,]
for (i in i:length(datos)) {
}
print("hola")
#datos[0,]
for (i in i:length(datos)) {
print("hola")
}
#datos[0,]
for (i in i:length(datos)[1]) {
print("hola")
}
#datos[0,]
for (i in i:10) {
print("hola")
}
n<-length(datos)
n
print(i)
#datos[0,]
for (i in i:n) {
print(i)
}
datos[0,]
as.numeric(datos[i,])
datos
#datos<-as.data.frame(gsub(" ","",datos))
View(datos)
#datos <- mutate(datos, as.numeric())
str(datos)
datos[0,]
datos[1,]
#datos[0,]
for (i in i:n) {
datos[i,]=gsub(" ", "", datos[i,])
as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
#datos<-as.data.frame(gsub(" ","",datos))
View(datos)
#datos[0,]
for (i in i:n) {
datos[i,]=gsub(" ", "", datos[i,])
#as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
#datos <- mutate(datos, as.numeric())
str(datos)
#datos[0,]
for (i in i:n) {
datos[i,]=gsub(" ", "", datos[i,])
#as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
mutate_all(funs(as.numeric(as.character(.)))
datos
#datos <- mutate(datos, as.numeric())
str(datos)
#datos[0,]
for (i in i:n) {
datos[i,]<-as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
#datos[0,]
for (i in i:n) {
datos[i,]<-as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
for (i in i:n) {
datos[i,]<-as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
#datos[0,]
for (i in i:n) {
datos[i,]<-as.numeric(datos[i,])
}
#datos <- mutate(datos, as.numeric())
str(datos)
n<-length(datos)
n
n2<-length(datos[0,])
n2
n2<-length(datos[,0])
n2
n2<-length(datos[,1])
n2
#datos[0,]
for (i in i:n) {
for (j in 1:n2) {
datos[i,n2]<-as.numeric(datos[i,n2])
}
}
#datos[0,]
for (i in i:n) {
for (j in 1:n2) {
datos[i,j]<-as.numeric(datos[i,j])
}
}
#datos[0,]
for (i in i:n) {
for (j in j:n2) {
datos[i,j]<-as.numeric(datos[i,j])
}
}
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
str(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
str(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
str(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
str(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
4class(datos)
class(datos)
summary(datos)
dim(datos)
str(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
str(datos)
#datos[0,]
for (i in i:n) {
for (j in j:n2) {
datos[i,j]<-as.numeric(datos[i,j])
}
}
#datos[0,]
i<-2
j<-1
for (i in i:n) {
for (j in j:n2) {
datos[i,j]<-as.numeric(datos[i,j])
}
}
#datos[0,]
i<-3
j<-1
for (i in i:n) {
for (j in j:n2) {
datos[i,j]<-as.numeric(datos[i,j])
}
}
datos<-group_by(datos, datos$Año)
#install.packages("dplyr")
#install.packages("ggplot2")
library(dplyr)
datos<-group_by(datos, datos$Año)
datos
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
head(datos)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
names(datos)
datos<-group_by(datos, Año)
datos
View(datos)
datos %>%  group_by(Año)
datos
datos %>%  group_by(Año) %>%
+   summarise(mean = mean(datos$Población.total), sum = sum(datos$Población.de.15.años.y.más), n = n())
datos %>%  group_by(Año) %>%
+   summarise(mean = mean(datos$Población.total), sum = sum(datos$Población.de.15.años.y.más), n = n())
datos %>%  group_by(Año) %>% summarise(mean = mean(datos$Población.total), sum = sum(datos$Población.de.15.años.y.más), n = n())
datos %>%  group_by(Año) %>% summarise(mean = mean(Población.total), sum = sum(Población.de.15.años.y.más), n = n())
datos %>%  group_by(Año) %>% summarise(mean = mean(Población.total), sum = sum(Población.de.15.años.y.más), n = n())
datos$
datos %>%  group_by(Año) %>% summarise(mean = mean(datos$Población.total), sum = sum(datos$Población.de.15.años.y.más), n = n())
datos %>%  group_by(Año) %>% summarise(mean = mean(datos$Población.total), sum = sum(datos$Población.de.15.años.y.más), n = n())
datos %>%  group_by(Año) %>% summarise(mean = mean(Población.total), sum = sum(Población.de.15.años.y.más), n = n())
class(datos)
datos %>%  group_by(Año) %>% summarise(PromedioTotal = mean(Población.total), Promedio15oMAS = mean(Población.de.15.años.y.más), n = n())
datos
datos %>%  group_by(Año) %>% summarise(PromedioTotal = mean(Población.total), Promedio15oMAS = mean(Población.de.15.años.y.más), n = n())
PromedioAnual
PromedioAnual<=datos %>%  group_by(Año) %>% summarise(PromedioTotal = mean(Población.total), Promedio15oMAS = mean(Población.de.15.años.y.más), n = n())
PromedioAnual<-datos %>%  group_by(Año) %>% summarise(PromedioTotal = mean(Población.total), Promedio15oMAS = mean(Población.de.15.años.y.más), n = n())
PromedioAnual
class(PromedioAnual)
PromedioAnual<-as.data.frame(PromedioAnual)
class(PromedioAnual)
PromedioAnual
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("forecast")
#install.packages("tseries")
library(dplyr)
library(ggplot2)
library(forecast)
library(tseries)
#Desactivar notación científica
options(scipen = 999)
datos<-read.csv("Consolidado para R-ENOE-Indicadores estratégicos-enero2005-diciembre2020.csv")
head(datos)
class(datos)
summary(datos)
dim(datos)
PromedioAnual<-datos %>%  group_by(Año) %>% summarise(PromedioTotal = mean(Población.total), Promedio15oMAS = mean(Población.de.15.años.y.más), n = n())
PromedioAnual<-as.data.frame(PromedioAnual)
class(PromedioAnual)
PromedioAnual
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioAnual) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioTotal) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioTotal) +
geom_histogram(binwidth = 100000, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioTotal) +
geom_histogram(binwidth = 10000000, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioTotal) +
geom_histogram(binwidth = 1, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioTotal) +
geom_histogram(binwidth = 12, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Graficamos la poblacion
PromedioAnual %>%
ggplot() +
aes(PromedioTotal) +
geom_histogram(binwidth = 120, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
